{
  "language": "Solidity",
  "sources": {
    "@cryptolink/contracts/message/IERC20cl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// (c)2021-2023 Atlas\n// security-contact: atlas@cryptolink.tech\npragma solidity ^0.8.9;\n\ninterface IERC20cl {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
    },
    "@cryptolink/contracts/message/IMessageV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// (c)2021-2023 Atlas\n// security-contact: atlas@cryptolink.tech\npragma solidity ^0.8.9;\n\ninterface IMessageV3 {\n    event SendRequested(uint txId, address sender, address recipient, uint chain, bool express, bytes data, uint16 confirmations);\n    event SendProcessed(uint txId, uint sourceChainId, address sender, address recipient);\n    event Success(uint txId, uint sourceChainId, address sender, address recipient, uint amount);\n    event ErrorLog(uint txId, string message);\n    event SetExsig(address caller, address signer);\n    event SetMaxgas(address caller, uint maxGas);\n    event SetMaxfee(address caller, uint maxFee);\n\n    function chainsig() external view returns (address signer);\n    function weth() external view returns (address wethTokenAddress);\n    function feeToken() external view returns (address feeToken);\n    function feeTokenDecimals() external view returns (uint feeTokenDecimals);\n    function minFee() external view returns (uint minFee);\n    function bridgeEnabled() external view returns (bool bridgeEnabled);\n    function takeFeesOffline() external view returns (bool takeFeesOffline);\n    function whitelistOnly() external view returns (bool whitelistOnly);\n\n    function enabledChains(uint destChainId) external view returns (bool enabled);\n    function customSourceFee(address caller) external view returns (uint customSourceFee);\n    function maxgas(address caller) external view returns (uint maxgas);\n    function exsig(address caller) external view returns (address signer);\n\n    // @dev backwards compat with BridgeClient\n    function minTokenForChain(uint chainId) external returns (uint amount);\n\n    function sendMessage(address recipient, uint chain, bytes calldata data, uint16 confirmations, bool express) external returns (uint txId);\n    // @dev backwards compat with BridgeClient\n    function sendRequest(address recipient, uint chainId, uint amount, address referrer, bytes calldata data, uint16 confirmations) external returns (uint txId);\n\n    function setExsig(address signer) external;\n    function setMaxgas(uint maxgas) external;\n    function setMaxfee(uint maxfee) external;\n\n    function getSourceFee(uint _destChainId, bool _express) external view returns (uint _fee);\n}"
    },
    "@cryptolink/contracts/message/MessageClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// (c)2021-2024 Atlas\n// security-contact: atlas@cryptolink.tech\npragma solidity ^0.8.9;\n\nimport \"./IMessageV3.sol\";\nimport \"./IERC20cl.sol\";\n\n/**\n * @title MessageV3 Client\n * @author CryptoLink.Tech <atlas@cryptolink.tech>\n */\nabstract contract MessageClient {\n    IMessageV3 public MESSAGEv3;\n    IERC20cl public FEE_TOKEN;\n\n    struct ChainData {\n        address endpoint; // address of this contract on specified chain\n        bytes endpointExtended; // address of this contract on non EVM\n        uint16 confirmations; // source confirmations\n        bool extended; // are we using extended endpoint? (addresses larger than uint256)\n    }\n    mapping(uint => ChainData) public CHAINS;\n    address public MESSAGE_OWNER;\n\n    modifier onlySelf(address _sender, uint _sourceChainId) {\n        require(msg.sender == address(MESSAGEv3), \"MessageClient: not authorized\");\n        require(_sender == CHAINS[_sourceChainId].endpoint, \"MessageClient: not authorized\");\n        _;\n    }\n\n    modifier onlyActiveChain(uint _destinationChainId) {\n        require(CHAINS[_destinationChainId].endpoint != address(0), \"MessageClient: destination chain not active\");\n        _;\n    }\n\n    modifier onlyMessageOwner() {\n        require(msg.sender == MESSAGE_OWNER, \"MessageClient: not authorized\");\n        _;\n    }\n\n    event MessageOwnershipTransferred(address previousOwner, address newOwner);\n    event RecoverToken(address owner, address token, uint amount);\n    event SetMaxgas(address owner, uint maxGas);\n    event SetMaxfee(address owner, uint maxfee);\n    event SetExsig(address owner, address exsig);\n\n    constructor() {\n        MESSAGE_OWNER = msg.sender;\n    }\n\n    function transferMessageOwnership(address _newMessageOwner) external onlyMessageOwner {\n        MESSAGE_OWNER = _newMessageOwner;\n        emit MessageOwnershipTransferred(msg.sender, _newMessageOwner);\n    }\n\n    /** BRIDGE RECEIVER */\n    function messageProcess(\n        uint _txId,          // transaction id\n        uint _sourceChainId, // source chain id\n        address _sender,     // corresponding MessageClient address on source chain\n        address _reference,  // (optional source reference address)\n        uint _amount,        // (not used for messages, always 0)\n        bytes calldata _data // encoded message from source chain\n    ) external virtual onlySelf (_sender, _sourceChainId) {\n    }\n\n    /** BRIDGE SENDER */\n    function _sendMessage(uint _destinationChainId, bytes memory _data) internal returns (uint _txId) {\n        ChainData memory _chain = CHAINS[_destinationChainId];\n        if(_chain.extended) { // non-evm addresses larger than uint256\n            _data = abi.encode(_data, _chain.endpointExtended);\n        }\n        return IMessageV3(MESSAGEv3).sendMessage(\n            _chain.endpoint,      // corresponding MessageClient contract address on destination chain\n            _destinationChainId,  // id of the destination chain\n            _data,                // arbitrary data package to send\n            _chain.confirmations, // amount of required transaction confirmations\n            false                 // send express mode on destination\n        );\n    }\n\n    function _sendMessageExpress(uint _destinationChainId, bytes memory _data) internal returns (uint _txId) {\n        ChainData memory _chain = CHAINS[_destinationChainId];\n        if(_chain.extended) { // non-evm addresses larger than uint256\n            _data = abi.encode(_data, _chain.endpointExtended);\n        }\n        return IMessageV3(MESSAGEv3).sendMessage(\n            _chain.endpoint,      // corresponding MessageV3Client contract address on destination chain\n            _destinationChainId,  // id of the destination chain\n            _data,                // arbitrary data package to send\n            _chain.confirmations, // amount of required transaction confirmations\n            true                  // send express mode on destination\n        );\n    }\n\n    /** OWNER */\n    function configureClientExtended(\n        address _messageV3, // MessageV3 bridge address\n        uint[] calldata _chains, // list of chains to accept as valid destinations\n        bytes[] calldata _endpoints, // list of corresponding MessageV3Client addresses on each chain\n        uint16[] calldata _confirmations // confirmations required on each chain before processing\n    ) external onlyMessageOwner {\n        uint _chainsLength = _chains.length;\n        for(uint x=0; x < _chainsLength; x++) {\n            CHAINS[_chains[x]].confirmations = _confirmations[x];\n            CHAINS[_chains[x]].endpointExtended = _endpoints[x];\n            CHAINS[_chains[x]].extended = true;\n            CHAINS[_chains[x]].endpoint = address(1);\n        }\n\n        _configureMessageV3(_messageV3);\n    }\n\n    function configureClient(\n        address _messageV3, // MessageV3 bridge address\n        uint[] calldata _chains, // list of chains to accept as valid destinations\n        address[] calldata _endpoints, // list of corresponding MessageV3Client addresses on each chain\n        uint16[] calldata _confirmations // confirmations required on each chain before processing\n    ) public onlyMessageOwner {\n        uint _chainsLength = _chains.length;\n        for(uint x=0; x < _chainsLength; x++) {\n            CHAINS[_chains[x]].confirmations = _confirmations[x];\n            CHAINS[_chains[x]].endpoint = _endpoints[x];\n            CHAINS[_chains[x]].extended = false;\n        }\n\n        _configureMessageV3(_messageV3);\n    }\n\n    function _configureMessageV3(address _messageV3) internal {\n        MESSAGEv3 = IMessageV3(_messageV3);\n        FEE_TOKEN = IERC20cl(MESSAGEv3.feeToken());\n\n        // approve bridge for source chain fees (limited per transaction with setMaxfee)\n        if(address(FEE_TOKEN) != address(0)) {\n            FEE_TOKEN.approve(address(MESSAGEv3), type(uint).max);\n        }\n\n        // approve bridge for destination gas fees (limited per transaction with setMaxgas)\n        if(address(MESSAGEv3.weth()) != address(0)) {\n            IERC20cl(MESSAGEv3.weth()).approve(address(MESSAGEv3), type(uint).max);\n        }\n    }\n\n    function setExsig(address _signer) external onlyMessageOwner {\n        MESSAGEv3.setExsig(_signer);\n        emit SetExsig(msg.sender, _signer);\n    }\n\n    function setMaxgas(uint _maxGas) external onlyMessageOwner {\n        MESSAGEv3.setMaxgas(_maxGas);\n        emit SetMaxgas(msg.sender, _maxGas);\n    }\n\n    function setMaxfee(uint _maxFee) external onlyMessageOwner {\n        MESSAGEv3.setMaxfee(_maxFee);\n        emit SetMaxfee(msg.sender, _maxFee);\n    }\n\n    function recoverToken(address _token, uint _amount) external onlyMessageOwner {\n        if(_token == address(0)) {\n            payable(msg.sender).transfer(_amount);\n        } else {\n            IERC20cl(_token).transfer(msg.sender, _amount);\n        }\n        emit RecoverToken(msg.sender, _token, _amount);\n    }\n\n    function isSelf(address _sender, uint _sourceChainId) public view returns (bool) {\n        if(_sender == CHAINS[_sourceChainId].endpoint) return true;\n        return false;\n    }\n\n    function isAuthorized(address _sender, uint _sourceChainId) external view returns (bool) {\n        return isSelf(_sender, _sourceChainId);\n    }\n\n    receive() external payable {}\n    fallback() external payable {}\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/HelloERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// (c)2024 Atlas (atlas@cryptolink.tech)\npragma solidity =0.8.17;\n\nimport \"@cryptolink/contracts/message/MessageClient.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\ncontract HelloERC20 is ERC20Burnable, MessageClient {\n    constructor() ERC20(\"HelloERC20\", \"HELLO\") {\n        _mint(msg.sender, 1_000_000 ether);\n    }\n\n    function bridge(uint _destChainId, address _recipient, uint _amount) external onlyActiveChain(_destChainId) {\n        // burn tokens\n        _burn(msg.sender, _amount);\n\n        // send cross chain message\n        _sendMessage(_destChainId, abi.encode(_recipient, _amount));\n    }\n\n    function messageProcess(uint, uint _sourceChainId, address _sender, address, uint, bytes calldata _data) external override  onlySelf(_sender, _sourceChainId)  {\n        // decode message\n        (address _recipient, uint _amount) = abi.decode(_data, (address, uint));\n\n        // mint tokens\n        _mint(_recipient, _amount);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}